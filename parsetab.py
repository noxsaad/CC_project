
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW COMMA DEF DIVIDE ELSE EQUALS FOR FUNCTION GT IDENTIFIER IF INT LBRACE LPAREN MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMI TIMES WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : INT IDENTIFIER declaration_restdeclaration_rest : EQUALS expression SEMIdeclaration_rest : SEMIstatement : IDENTIFIER EQUALS expression SEMIstatement : expression SEMIstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : RETURN expression SEMIstatement : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN ARROW INT LBRACE statement_list RBRACEparameter_list : parameter_list COMMA parameter\n| parameter\n| emptyparameter : INT IDENTIFIERempty :expression : IDENTIFIER LPAREN argument_list RPARENargument_list : argument_list COMMA expression\n| expression\n| emptyexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'INT':([0,2,3,12,16,27,29,41,42,44,52,54,56,58,59,61,63,64,65,],[4,4,-3,-2,-8,-4,-6,-10,49,-7,-5,4,49,4,62,-9,4,4,-11,]),'IDENTIFIER':([0,2,3,4,8,9,10,12,14,15,16,17,18,19,20,21,22,27,28,29,41,44,46,49,52,54,58,61,63,64,65,],[5,5,-3,13,24,24,26,-2,24,24,-8,24,24,24,24,24,24,-4,24,-6,-10,-7,24,57,-5,5,5,-9,5,5,-11,]),'IF':([0,2,3,12,16,27,29,41,44,52,54,58,61,63,64,65,],[7,7,-3,-2,-8,-4,-6,-10,-7,-5,7,7,-9,7,7,-11,]),'RETURN':([0,2,3,12,16,27,29,41,44,52,54,58,61,63,64,65,],[9,9,-3,-2,-8,-4,-6,-10,-7,-5,9,9,-9,9,9,-11,]),'FUNCTION':([0,2,3,12,16,27,29,41,44,52,54,58,61,63,64,65,],[10,10,-3,-2,-8,-4,-6,-10,-7,-5,10,10,-9,10,10,-11,]),'LPAREN':([0,2,3,5,7,8,9,12,14,15,16,17,18,19,20,21,22,24,26,27,28,29,41,44,46,52,54,58,61,63,64,65,],[8,8,-3,15,22,8,8,-2,8,8,-8,8,8,8,8,8,8,15,42,-4,8,-6,-10,-7,8,-5,8,8,-9,8,8,-11,]),'NUMBER':([0,2,3,8,9,12,14,15,16,17,18,19,20,21,22,27,28,29,41,44,46,52,54,58,61,63,64,65,],[11,11,-3,11,11,-2,11,11,-8,11,11,11,11,11,11,-4,11,-6,-10,-7,11,-5,11,11,-9,11,11,-11,]),'$end':([1,2,3,12,16,27,29,41,44,52,61,65,],[0,-1,-3,-2,-8,-4,-6,-10,-7,-5,-9,-11,]),'RBRACE':([3,12,16,27,29,41,44,52,58,61,64,65,],[-3,-2,-8,-4,-6,-10,-7,-5,61,-9,65,-11,]),'EQUALS':([5,13,],[14,28,]),'SEMI':([5,6,11,13,24,25,30,34,35,36,37,38,40,43,45,],[-28,16,-27,29,-28,41,44,-21,-22,-23,-24,-25,-26,52,-17,]),'PLUS':([5,6,11,23,24,25,30,32,34,35,36,37,38,39,40,43,45,53,],[-28,17,-27,17,-28,17,17,17,17,17,17,17,17,17,-26,17,-17,17,]),'MINUS':([5,6,11,23,24,25,30,32,34,35,36,37,38,39,40,43,45,53,],[-28,18,-27,18,-28,18,18,18,18,18,18,18,18,18,-26,18,-17,18,]),'TIMES':([5,6,11,23,24,25,30,32,34,35,36,37,38,39,40,43,45,53,],[-28,19,-27,19,-28,19,19,19,19,19,19,19,19,19,-26,19,-17,19,]),'DIVIDE':([5,6,11,23,24,25,30,32,34,35,36,37,38,39,40,43,45,53,],[-28,20,-27,20,-28,20,20,20,20,20,20,20,20,20,-26,20,-17,20,]),'GT':([5,6,11,23,24,25,30,32,34,35,36,37,38,39,40,43,45,53,],[-28,21,-27,21,-28,21,21,21,21,21,21,21,21,21,-26,21,-17,21,]),'RPAREN':([11,15,23,24,31,32,33,34,35,36,37,38,39,40,42,45,48,50,51,53,57,60,],[-27,-16,40,-28,45,-19,-20,-21,-22,-23,-24,-25,47,-26,-16,-17,55,-13,-14,-18,-15,-12,]),'COMMA':([11,15,24,31,32,33,34,35,36,37,38,40,42,45,48,50,51,53,57,60,],[-27,-16,-28,46,-19,-20,-21,-22,-23,-24,-25,-26,-16,-17,56,-13,-14,-18,-15,-12,]),'LBRACE':([47,62,],[54,63,]),'ARROW':([55,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,54,63,],[2,58,64,]),'statement':([0,2,54,58,63,64,],[3,12,3,12,3,12,]),'expression':([0,2,8,9,14,15,17,18,19,20,21,22,28,46,54,58,63,64,],[6,6,23,25,30,32,34,35,36,37,38,39,43,53,6,6,6,6,]),'declaration_rest':([13,],[27,]),'argument_list':([15,],[31,]),'empty':([15,42,],[33,51,]),'parameter_list':([42,],[48,]),'parameter':([42,56,],[50,60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement -> INT IDENTIFIER declaration_rest','statement',3,'p_statement_declaration','parser.py',36),
  ('declaration_rest -> EQUALS expression SEMI','declaration_rest',3,'p_declaration_rest_init','parser.py',40),
  ('declaration_rest -> SEMI','declaration_rest',1,'p_declaration_rest_noinit','parser.py',44),
  ('statement -> IDENTIFIER EQUALS expression SEMI','statement',4,'p_statement_assignment','parser.py',49),
  ('statement -> expression SEMI','statement',2,'p_statement_expr','parser.py',54),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','parser.py',59),
  ('statement -> RETURN expression SEMI','statement',3,'p_statement_return','parser.py',64),
  ('statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN ARROW INT LBRACE statement_list RBRACE','statement',10,'p_statement_function','parser.py',70),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',74),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',75),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser.py',76),
  ('parameter -> INT IDENTIFIER','parameter',2,'p_parameter','parser.py',86),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',90),
  ('expression -> IDENTIFIER LPAREN argument_list RPAREN','expression',4,'p_expression_funccall','parser.py',95),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',99),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',100),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',101),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',112),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',120),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',124),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',128),
]
